<?xml version="1.0" encoding="UTF-8"?>
<!--

Copyright 2017 Agilx, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

-->
<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns="http://maven.apache.org/POM/4.0.0"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>ai.apptuit</groupId>
  <artifactId>jinsight</artifactId>
  <version>0.3.0</version>
  <packaging>jar</packaging>

  <name>JInsight</name>
  <url>https://github.com/ApptuitAI/JInsight/</url>
  <inceptionYear>2017</inceptionYear>
  <scm>
    <url>https://github.com/ApptuitAI/JInsight</url>
    <connection>scm:git:git://github.com/ApptuitAI/jinsight.git</connection>
    <developerConnection>scm:git:git@github.com:ApptuitAI/jinsight.git</developerConnection>
  </scm>
  <issueManagement>
    <url>https://github.com/ApptuitAI/JInsight/issues</url>
    <system>GitHub Issues</system>
  </issueManagement>
  <licenses>
    <license>
      <name>Apache 2.0</name>
      <url>https://github.com/ApptuitAI/JInsight/blob/master/LICENSE</url>
    </license>
  </licenses>

  <distributionManagement>
    <repository>
      <id>bintray-apptuitai-jinsight</id>
      <name>apptuitai-jinsight</name>
      <url>https://api.bintray.com/maven/apptuitai/maven/jinsight/;publish=1</url>
    </repository>
  </distributionManagement>


  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

    <!-- Aliases -->
    <btm.script.sources>${project.basedir}/src/main/resources/btm-scripts</btm.script.sources>

    <!-- Debug flags -->
    <!-- (comment the blank tag to enable the debug flag) -->
    <jvm.debug.options>
      -agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5050
    </jvm.debug.options>
    <jvm.debug.options/>
    <byteman.debug.options>-Dorg.jboss.byteman.verbose</byteman.debug.options>
    <byteman.debug.options/>


    <!-- Version Properties -->
    <maven.compiler.target>1.8</maven.compiler.target>
    <maven.compiler.source>1.8</maven.compiler.source>
    <java.version>1.8</java.version>
    <maven.version>3.2</maven.version>
    <netty.version>4.1.15.Final</netty.version>
    <surefire.version>2.20.1</surefire.version>
    <junit.version>4.12</junit.version>
    <powermock.version>1.7.3</powermock.version>
    <jacoco.version>0.7.9</jacoco.version>
    <byteman.version>3.0.10</byteman.version>

    <!-- Acceptance Criteria -->
    <enforce.code.style>false</enforce.code.style>
    <ignore.license.checks>false</ignore.license.checks>
    <enforce.findbugs>true</enforce.findbugs>
    <minimum.complexity.coverage>0.60</minimum.complexity.coverage>
    <minimum.instruction.coverage>0.80</minimum.instruction.coverage>
    <max.agent.file.size>2.5</max.agent.file.size>
  </properties>

  <dependencies>
    <dependency>
      <groupId>org.apache.httpcomponents</groupId>
      <artifactId>httpclient</artifactId>
      <version>4.5.3</version>
    </dependency>
    <dependency>
      <groupId>org.jboss.byteman</groupId>
      <artifactId>byteman</artifactId>
      <version>${byteman.version}</version>
    </dependency>
    <dependency>
      <groupId>io.dropwizard.metrics</groupId>
      <artifactId>metrics-core</artifactId>
      <version>3.2.5</version>
    </dependency>
    <dependency>
      <groupId>io.dropwizard.metrics</groupId>
      <artifactId>metrics-jvm</artifactId>
      <version>3.2.5</version>
    </dependency>


    <!--
    BCI Testing related dependencies
    -->
    <dependency>
      <groupId>com.h2database</groupId>
      <artifactId>h2</artifactId>
      <version>1.4.196</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>net.sf.ehcache</groupId>
      <artifactId>ehcache</artifactId>
      <version>2.10.4</version>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>org.eclipse.jetty</groupId>
      <artifactId>jetty-servlet</artifactId>
      <version>9.4.7.v20170914</version>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>org.apache.tomcat.embed</groupId>
      <artifactId>tomcat-embed-core</artifactId>
      <version>8.5.21</version>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>org.apache.tomcat.embed</groupId>
      <artifactId>tomcat-embed-jasper</artifactId>
      <version>8.5.21</version>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>log4j</groupId>
      <artifactId>log4j</artifactId>
      <version>1.2.17</version>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>org.apache.logging.log4j</groupId>
      <artifactId>log4j-api</artifactId>
      <version>2.9.1</version>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>org.apache.logging.log4j</groupId>
      <artifactId>log4j-core</artifactId>
      <version>2.9.1</version>
      <scope>provided</scope>
    </dependency>
    <!--
    Unit testing related dependencies
    -->
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>${junit.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.mockito</groupId>
      <artifactId>mockito-core</artifactId>
      <version>1.10.19</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.powermock</groupId>
      <artifactId>powermock-api-mockito</artifactId>
      <version>${powermock.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.powermock</groupId>
      <artifactId>powermock-module-junit4</artifactId>
      <version>${powermock.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.powermock</groupId>
      <artifactId>powermock-module-testng</artifactId>
      <version>${powermock.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.jacoco</groupId>
      <artifactId>org.jacoco.agent</artifactId>
      <classifier>runtime</classifier>
      <version>${jacoco.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.awaitility</groupId>
      <artifactId>awaitility</artifactId>
      <version>3.0.0</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>com.googlecode.json-simple</groupId>
      <artifactId>json-simple</artifactId>
      <version>1.1.1</version>
      <scope>test</scope>
    </dependency>
  </dependencies>
  <build>

    <resources>
      <resource>
        <directory>${project.basedir}/src/main/resources</directory>
        <excludes>
          <!-- Exclude btm files since we merge them and copy merged file in #merge-btm-files -->
          <exclude>**/*.btm</exclude>
        </excludes>
        <filtering>false</filtering>
      </resource>
    </resources>

    <plugins>

      <!-- Plugins for validate phase -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-checkstyle-plugin</artifactId>
        <version>2.17</version>
        <dependencies>
          <dependency>
            <groupId>com.puppycrawl.tools</groupId>
            <artifactId>checkstyle</artifactId>
            <version>8.2</version>
          </dependency>
        </dependencies>
        <configuration>
          <configLocation>google_checks.xml</configLocation>
          <encoding>UTF-8</encoding>
          <logViolationsToConsole>true</logViolationsToConsole>
          <failOnViolation>${enforce.code.style}</failOnViolation>
          <violationSeverity>warning</violationSeverity>
          <outputFile>${project.build.directory}/reports/checkstyle-results-java.xml
          </outputFile>
        </configuration>
        <executions>
          <execution>
            <id>java-style-check</id>
            <phase>validate</phase>
            <goals>
              <goal>check</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.rat</groupId>
        <artifactId>apache-rat-plugin</artifactId>
        <version>0.12</version>
        <configuration>
          <ignoreErrors>${ignore.license.checks}</ignoreErrors>
          <reportStyle>xml</reportStyle>
          <reportFile>${project.build.directory}/reports/license-check-results.xml</reportFile>
        </configuration>
        <executions>
          <execution>
            <phase>validate</phase>
            <goals>
              <goal>check</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.zcore.maven</groupId>
        <artifactId>merge-maven-plugin</artifactId>
        <version>0.0.3</version>
        <executions>
          <execution>
            <id>merge-btm-files</id>
            <phase>generate-resources</phase>
            <goals>
              <goal>merge</goal>
            </goals>
            <configuration>
              <mergers>
                <merger>
                  <target>${project.build.outputDirectory}/btm-scripts/jinsight.btm</target>
                  <sources>
                    <source>${btm.script.sources}/ehcache.btm</source>
                    <source>${btm.script.sources}/jdbc.btm</source>
                    <source>${btm.script.sources}/servlet.btm</source>
                    <source>${btm.script.sources}/log4j.btm</source>
                  </sources>
                </merger>
              </mergers>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!-- Plugins for test phase -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>${surefire.version}</version>
        <dependencies>
          <dependency>
            <groupId>org.apache.maven.surefire</groupId>
            <artifactId>surefire-junit4</artifactId>
            <version>${surefire.version}</version>
          </dependency>
        </dependencies>
        <configuration>
          <argLine>
            ${jvm.debug.options}
            -javaagent:${project.build.directory}/${project.build.finalName}.jar
            -Djacoco-agent.destfile=${project.build.directory}/jacoco.exec
            -Djinsight.config=${project.build.testOutputDirectory}/jinsight-config-test.properties
            ${byteman.debug.options}
          </argLine>
        </configuration>
      </plugin>

      <!-- Plugins for package phase -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-jar-plugin</artifactId>
        <version>3.0.2</version>
        <configuration>
          <archive>
            <manifestEntries>
              <Premain-Class>ai.apptuit.metrics.jinsight.Agent</Premain-Class>
              <Agent-Class>ai.apptuit.metrics.jinsight.Agent</Agent-Class>
              <Can-Redefine-Classes>true</Can-Redefine-Classes>
              <Can-Retransform-Classes>true</Can-Retransform-Classes>
            </manifestEntries>
          </archive>
        </configuration>
        <executions>
          <execution>
            <id>default-jar</id>
            <phase>generate-test-resources</phase>
            <goals>
              <goal>jar</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-shade-plugin</artifactId>
        <version>3.1.0</version>
        <configuration>
          <createDependencyReducedPom>false</createDependencyReducedPom>
        </configuration>
        <executions>
          <execution>
            <id>generate-shaded-jar-for-tests</id>
            <phase>generate-test-resources</phase>
            <goals>
              <goal>shade</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.jboss.byteman</groupId>
        <artifactId>byteman-rulecheck-maven-plugin</artifactId>
        <version>${byteman.version}</version>
        <executions>
          <execution>
            <id>rulecheck-test</id>
            <phase>compile</phase>
            <goals>
              <goal>rulecheck</goal>
            </goals>
            <configuration>
              <scriptDir>${btm.script.sources}</scriptDir>
              <includes>
                <include>**/*.btm</include>
              </includes>
              <verbose>true</verbose>
            </configuration>
          </execution>
        </executions>
      </plugin>


      <!-- Plugins for verify phase -->
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>findbugs-maven-plugin</artifactId>
        <version>3.0.5</version>
        <configuration>
          <xmlOutput>true</xmlOutput>
          <effort>Max</effort>
          <failOnError>${enforce.findbugs}</failOnError>
          <includeTests>false</includeTests>
          <maxRank>9</maxRank>
          <xmlOutputDirectory>${project.build.directory}/reports/</xmlOutputDirectory>
          <outputDirectory>${project.build.directory}/reports/</outputDirectory>
        </configuration>
        <executions>
          <execution>
            <goals>
              <goal>check</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.jacoco</groupId>
        <artifactId>jacoco-maven-plugin</artifactId>
        <version>${jacoco.version}</version>
        <executions>
          <execution>
            <id>default-instrument</id>
            <goals>
              <goal>instrument</goal>
            </goals>
          </execution>
          <execution>
            <id>default-restore-instrumented-classes</id>
            <goals>
              <goal>restore-instrumented-classes</goal>
            </goals>
          </execution>
          <execution>
            <id>default-report</id>
            <phase>prepare-package</phase>
            <goals>
              <goal>report</goal>
            </goals>
          </execution>
          <execution>
            <id>default-check</id>
            <goals>
              <goal>check</goal>
            </goals>
            <configuration>
              <rules>
                <rule>
                  <element>BUNDLE</element>
                  <limits>
                    <limit>
                      <counter>COMPLEXITY</counter>
                      <value>COVEREDRATIO</value>
                      <minimum>${minimum.complexity.coverage}</minimum>
                    </limit>
                    <limit>
                      <counter>INSTRUCTION</counter>
                      <value>COVEREDRATIO</value>
                      <minimum>${minimum.instruction.coverage}</minimum>
                    </limit>
                  </limits>
                </rule>
              </rules>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.codehaus.gmaven</groupId>
        <artifactId>groovy-maven-plugin</artifactId>
        <version>2.0</version>
        <executions>
          <execution>
            <id>enforce-agent-jar-size</id>
            <phase>package</phase>
            <goals>
              <goal>execute</goal>
            </goals>
            <configuration>
              <properties>
                <filename>
                  ${project.build.directory}/${project.build.finalName}.${project.packaging}
                </filename>
                <maxSizeMB>${max.agent.file.size}</maxSizeMB>
              </properties>
              <source>
                float maxSize = Float.parseFloat(properties['maxSizeMB'])
                File file = new File(properties['filename'])
                log.info("${file} is of size ${file.length()} bytes")
                if (file.length() > maxSize * 1024 * 1024) {
                  log.error("Package exceeds maximum size allowed size: ${maxSize} MB")
                  fail()
                } else
                  log.info("File size OK")

              </source>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>cobertura-maven-plugin</artifactId>
        <version>2.7</version>
        <configuration>
          <quiet>true</quiet>
          <formats>
            <format>html</format>
            <format>xml</format>
          </formats>
          <check/>
        </configuration>
      </plugin>
    </plugins>
  </build>
</project>
